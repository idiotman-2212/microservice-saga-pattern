<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Spring Boot Microservices Project&#10;&#10;## Overview&#10;This project demonstrates a microservices architecture using Spring Boot. It includes several independent services communicating via REST and Apache Kafka, with service discovery, API gateway, and centralized data management using PostgreSQL and Redis.&#10;&#10;### Services&#10;- **API Gateway**: Routes requests to appropriate services.&#10;- **Service Discovery**: Registers and discovers services (Eureka/Consul).&#10;- **Customer Service**: Manages customer data.&#10;- **Product Service**: Handles product information.&#10;- **Order Service**: Processes orders.&#10;- **Payment Service**: Manages payments.&#10;- **Inventory Service**: Tracks inventory.&#10;&#10;### Supporting Infrastructure&#10;- **PostgreSQL**: Database for all services (separate DBs per service).&#10;- **Redis**: Caching and message brokering.&#10;- **Kafka &amp; Zookeeper**: Event-driven communication between services.&#10;&#10;## Architecture Diagram&#10;&#10;```&#10;+-------------+        +-------------------+        +-------------------+&#10;|             |        |                   |        |                   |&#10;|  API Gateway+-------&gt;+ Service Discovery +&lt;------&gt;+   Microservices   |&#10;|             |        |                   |        | (Order, Product,  |&#10;+-------------+        +-------------------+        |  Customer, etc.)  |&#10;       |                        |                   +-------------------+&#10;       |                        |                           |&#10;       v                        v                           v&#10;+-------------------+   +-------------------+       +-------------------+&#10;|    PostgreSQL     |   |      Redis        |       |      Kafka        |&#10;+-------------------+   +-------------------+       +-------------------+&#10;```&#10;&#10;## Installation &amp; Setup&#10;&#10;### Prerequisites&#10;- Docker &amp; Docker Compose&#10;- Java 17+ (for local development)&#10;- Maven&#10;&#10;### Quick Start (Recommended)&#10;1. **Clone the repository:**&#10;   ```sh&#10;   git clone &lt;your-repo-url&gt;&#10;   cd spring-boot-microservices&#10;   ```&#10;2. **Start all services with Docker Compose:**&#10;   ```sh&#10;   docker-compose up --build&#10;   ```&#10;   This will start Zookeeper, Kafka, Redis, and PostgreSQL with all required databases.&#10;&#10;3. **Build and run microservices:**&#10;   - You can use the provided `start-services.ps1` script (on Windows) or run each service manually:&#10;     ```sh&#10;     cd &lt;service-folder&gt;&#10;     mvn clean package&#10;     java -jar target/&lt;service-name&gt;-1.0-SNAPSHOT.jar&#10;     ```&#10;&#10;### Access Points&#10;- API Gateway: `http://localhost:8080`&#10;- Service Discovery: `http://localhost:8761` (if using Eureka)&#10;- PostgreSQL: `localhost:5432` (user: postgres, password: postgres)&#10;- Redis: `localhost:6379`&#10;- Kafka: `localhost:9092`&#10;&#10;## Notes&#10;- Databases are initialized using `init-multiple-databases.sh`.&#10;- Kafka topics are auto-created for inter-service communication.&#10;- Update `application.yml` in each service for custom configuration.&#10;&#10;## License&#10;MIT&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>